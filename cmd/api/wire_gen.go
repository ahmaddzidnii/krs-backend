// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fmt"
	"github.com/ahmaddzidnii/backend-krs-auth-service/internal/config"
	"github.com/ahmaddzidnii/backend-krs-auth-service/internal/database"
	"github.com/ahmaddzidnii/backend-krs-auth-service/internal/handlers"
	"github.com/ahmaddzidnii/backend-krs-auth-service/internal/middlewares"
	"github.com/ahmaddzidnii/backend-krs-auth-service/internal/repository"
	"github.com/ahmaddzidnii/backend-krs-auth-service/internal/routes"
	"github.com/ahmaddzidnii/backend-krs-auth-service/internal/service"
	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from injector.go:

func InitializeApp() (Application, error) {
	logger := ProvideLogger()
	db, err := ProvideDatabase(logger)
	if err != nil {
		return Application{}, err
	}
	authRepository := repository.NewAuthRepository(db, logger)
	client, err := ProvideRedis(logger)
	if err != nil {
		return Application{}, err
	}
	sessionRepository := repository.NewSessionRepository(client, logger)
	mahasiswaRepository := repository.NewMahasiswaRepository(db, client)
	dosenRepository := repository.NewDosenRepository(db)
	pegawaiRepository := repository.NewPegawaiRepository(db)
	authService := service.NewAuthService(authRepository, sessionRepository, logger, mahasiswaRepository, dosenRepository, pegawaiRepository)
	validate := ProvideValidator()
	authHandler := handlers.NewAuthHandler(authService, logger, validate)
	tahunAkademikRepository := repository.NewTahunAkademikRepository(db, client)
	tahunAkademikService := service.NewTahunAkademikService(tahunAkademikRepository, logger)
	mahasiswaService := service.NewMahasiswaService(mahasiswaRepository, tahunAkademikService, logger)
	penjadwalanRepository := repository.NewPenjadwalanRepository(db, client, logger)
	penjadwalanService := service.NewPenjadwalanService(penjadwalanRepository, mahasiswaRepository, mahasiswaService)
	mahasiswaHandler := handlers.NewMahasiswaHandler(mahasiswaService, penjadwalanService, logger, validate)
	handlersHandlers := handlers.NewHandlers(authHandler, mahasiswaHandler)
	middleware := middlewares.NewMiddleware(client, db, tahunAkademikService)
	app := ProvideRouter(handlersHandlers, middleware)
	application := NewApplication(app, logger)
	return application, nil
}

// injector.go:

type Application struct {
	App    *fiber.App
	Logger *logrus.Logger
}

func ProvideLogger() *logrus.Logger {
	return config.InitLogger()
}

func ProvideValidator() *validator.Validate {
	return config.InitValidator()
}

func ProvideDatabase(logger *logrus.Logger) (*gorm.DB, error) {
	db, err := database.InitDatabase()
	if err != nil {
		return nil, fmt.Errorf("failed to initialize database: %w", err)
	}
	logger.Info("Database connection and migration successful")
	return db, nil
}

func ProvideRedis(logger *logrus.Logger) (*redis.Client, error) {
	client, err := database.InitRedis()
	if err != nil {
		return nil, fmt.Errorf("failed to initialize Redis: %w", err)
	}
	logger.Info("Redis connection successful")
	return client, nil
}

func ProvideRouter(h *handlers.Handlers, middleware *middlewares.Middleware) *fiber.App {
	app := fiber.New()
	routes.RegisterRoutes(app, h, middleware)
	return app
}

func NewApplication(app *fiber.App, logger *logrus.Logger) Application {
	return Application{
		App:    app,
		Logger: logger,
	}
}

var InfrastructureSet = wire.NewSet(
	ProvideLogger,
	ProvideValidator,
	ProvideDatabase,
	ProvideRedis,
)

var RepositorySet = wire.NewSet(repository.NewAuthRepository, repository.NewSessionRepository, repository.NewMahasiswaRepository, repository.NewTahunAkademikRepository, repository.NewDosenRepository, repository.NewPegawaiRepository, repository.NewPenjadwalanRepository)

var ServiceSet = wire.NewSet(service.NewAuthService, service.NewMahasiswaService, service.NewTahunAkademikService, service.NewPenjadwalanService)

var HandlerSet = wire.NewSet(handlers.NewAuthHandler, handlers.NewMahasiswaHandler, handlers.NewHandlers)

var MiddlewareSet = wire.NewSet(middlewares.NewMiddleware)

var RouterSet = wire.NewSet(
	ProvideRouter,
)

var AppSet = wire.NewSet(
	InfrastructureSet,
	RepositorySet,
	ServiceSet,
	HandlerSet,
	MiddlewareSet,
	RouterSet,
	NewApplication,
)
